diamonds
library(dplyr)
diamonds
load(diamonds)
library(ggplot2)
diamonds
class(diamonds)
lapply(class, diamonds)
lapply("class",diamonds)
mapply("class",diamonds)
map(class, diamonds)
library(purrr)
map(class, diamonds)
map("class", diamonds)
map1("class", diamonds)
map_chr("class", diamonds)
map_chr(class, diamonds)
map_chr(diamonds, class)
map_chr(diamonds, "class")
?map
mtcars %>% map(class)
mtcars %>% map_chr(class)
mtcars %>% map_chr(class=="numeric")
sapply(mtcars, class)
sapply(mtcars, is.numeric)
sapply(dimonds, is.numeric)
sapply(diamonds, is.numeric)
diamonds
diamonds[,sapply(diamonds, is.numeric)]
checkboxInput("dummyBox","Check and uncheck"),
#### Intent ####
# illustrate Shiny UI Layout paradaigm
ui <- shinyUI(fluidPage(
sidebarLayout(
sidebarPanel(
checkboxInput("dummyBox","Check and uncheck"),
sliderInput("dummySlider","Move the slider",
min = 0,max = 1,value = 0.5)
), #end of sidebarPanel
mainPanel(
h1("Nothing here to see")
) #end of mainPainel
)#end of sidebarLayout
)#end of fluidPage
)#end of UI
server <- shinyServer(function(input, output) {
})
shinyApp(ui = ui, server = server)
###
#tabsetPanel(
#tabPanel("Tab1",h1("Not a lot in tab1")),
#tabPanel("Tab2", h2("Or tab two but smaller")))
library(shiny)
ui <- shinyUI(fluidPage(
sidebarLayout(
sidebarPanel(
checkboxInput("dummyBox","Check and uncheck"),
sliderInput("dummySlider","Move the slider",
min = 0,max = 1,value = 0.5)
), #end of sidebarPanel
mainPanel(
h1("Nothing here to see")
) #end of mainPainel
)#end of sidebarLayout
)#end of fluidPage
)#end of UI
server <- shinyServer(function(input, output) {
})
shinyApp(ui = ui, server = server)
library(shiny)
diamonds[,sapply(diamonds, is.numeric)]
# Author: brian_carter@optum.com
# Date: 06-Jan-2017
#### Intent ####
# illustrate reactive plots and Shiny UI Layout paradaigm
library(shiny)
library(ggplot2)
ui <- shinyUI(fluidPage(
# Application title.
titlePanel("Finally a plot"),
sidebarLayout(
sidebarPanel(
#When input$col changes plot will update
selectInput("col", "Choose numeric column to graph:",
choices = c(colnames(diamonds[,sapply(diamonds, is.numeric)]))),
#When input$numBins changes, plot will update.
sliderInput("numBins","Choose number of bins",
min = 5,max = 30,value = 10),
#when input$nowRows changes, plot will update
numericInput("numRows", "Number of rows to view:", 10)
),#End sidebarPanel
mainPanel(
h4("Histogram"),
plotOutput("diaHist"),
h4("Observations"),
tableOutput("diaRows")
)# End main panel
)#end sidebarLayout
)#end fluidPage
)#end UI
server <- shinyServer(function(input, output) {
# Show the first "n" observations
output$diaRows <- renderTable({
head(diamonds)
})
# Create histogram
output$diaHist = renderPlot({
ggplot(diamonds, aes(x=depth)) + geom_histogram()
})
})
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
# Author: brian_carter@optum.com
# Date: 06-Jan-2017
#### Intent ####
# illustrate reactive plots and Shiny UI Layout paradaigm
library(shiny)
library(ggplot2)
ui <- shinyUI(fluidPage(
# Application title.
titlePanel("Finally a plot"),
sidebarLayout(
sidebarPanel(
#When input$col changes plot will update
selectInput("col", "Choose numeric column to graph:",
choices = c(colnames(diamonds[,sapply(diamonds, is.numeric)]))),
#When input$numBins changes, plot will update.
sliderInput("numBins","Choose number of bins",
min = 5,max = 30,value = 10),
#when input$nowRows changes, plot will update
numericInput("numRows", "Number of rows to view:", 10)
),#End sidebarPanel
mainPanel(
h4("Histogram"),
plotOutput("diaHist"),
h4("Observations"),
tableOutput("diaRows")
)# End main panel
)#end sidebarLayout
)#end fluidPage
)#end UI
server <- shinyServer(function(input, output) {
# Show the first "n" observations
output$diaRows <- renderTable({
head(diamonds, n = input$numRows)
})
# Create histogram
output$diaHist = renderPlot({
ggplot(diamonds, aes(x=depth)) + geom_histogram()
})
})
shinyApp(ui = ui, server = server)
# Author: brian_carter@optum.com
# Date: 06-Jan-2017
#### Intent ####
# illustrate reactive plots and Shiny UI Layout paradaigm
library(shiny)
library(ggplot2)
ui <- shinyUI(fluidPage(
# Application title.
titlePanel("Finally a plot"),
sidebarLayout(
sidebarPanel(
#When input$col changes plot will update
selectInput("col", "Choose numeric column to graph:",
choices = c(colnames(diamonds[,sapply(diamonds, is.numeric)]))),
#When input$numBins changes, plot will update.
sliderInput("numBins","Choose number of bins",
min = 5,max = 30,value = 10),
#when input$nowRows changes, plot will update
numericInput("numRows", "Number of rows to view:", 10)
),#End sidebarPanel
mainPanel(
h4("Histogram"),
plotOutput("diaHist"),
h4("Observations"),
tableOutput("diaRows")
)# End main panel
)#end sidebarLayout
)#end fluidPage
)#end UI
server <- shinyServer(function(input, output) {
# Show the first "n" observations
output$diaRows <- renderTable({
head(diamonds, n = input$numRows)
})
# Create histogram
output$diaHist = renderPlot({
ggplot(diamonds, aes(x=input$col)) + geom_histogram()
})
})
shinyApp(ui = ui, server = server)
# Author: brian_carter@optum.com
# Date: 06-Jan-2017
#### Intent ####
# illustrate reactive plots and Shiny UI Layout paradaigm
library(shiny)
library(ggplot2)
ui <- shinyUI(fluidPage(
# Application title.
titlePanel("Finally a plot"),
sidebarLayout(
sidebarPanel(
#When input$col changes plot will update
selectInput("col", "Choose numeric column to graph:",
choices = c(colnames(diamonds[,sapply(diamonds, is.numeric)]))),
#When input$numBins changes, plot will update.
sliderInput("numBins","Choose number of bins",
min = 5,max = 30,value = 10),
#when input$nowRows changes, plot will update
numericInput("numRows", "Number of rows to view:", 10)
),#End sidebarPanel
mainPanel(
h4("Histogram"),
plotOutput("diaHist"),
h4("Observations"),
tableOutput("diaRows")
)# End main panel
)#end sidebarLayout
)#end fluidPage
)#end UI
server <- shinyServer(function(input, output) {
# Show the first "n" observations
output$diaRows <- renderTable({
head(diamonds, n = input$numRows)
})
# Create histogram
output$diaHist = renderPlot({
ggplot(diamonds, aes_string(x=input$col)) + geom_histogram()
})
})
shinyApp(ui = ui, server = server)
diamonds[,sapply(diamonds, is.numeric)]
diamonds
?bins
?geom_histogram
# Author: brian_carter@optum.com
# Date: 06-Jan-2017
#### Intent ####
# illustrate reactive plots and Shiny UI Layout paradaigm
library(shiny)
library(ggplot2)
ui <- shinyUI(fluidPage(
# Application title.
titlePanel("Finally a plot"),
sidebarLayout(
sidebarPanel(
#When input$col changes plot will update
selectInput("col", "Choose numeric column to graph:",
choices = c(colnames(diamonds[,sapply(diamonds, is.numeric)]))),
#When input$numBins changes, plot will update.
sliderInput("numBins","Choose number of bins",
min = 5,max = 30,value = 10),
#when input$nowRows changes, plot will update
numericInput("numRows", "Number of rows to view:", 10)
),#End sidebarPanel
mainPanel(
h4("Histogram"),
plotOutput("diaHist"),
h4("Observations"),
tableOutput("diaRows")
)# End main panel
)#end sidebarLayout
)#end fluidPage
)#end UI
server <- shinyServer(function(input, output) {
# Show the first "n" observations
output$diaRows <- renderTable({
head(diamonds, n = input$numRows)
})
# Create histogram
output$diaHist = renderPlot({
ggplot(diamonds, aes_string(x=input$col)) + geom_histogram(bins = input$numBins)
})
})
shinyApp(ui = ui, server = server)
library(ggplot2)
library(plotly)
p <- ggplot(txhousing, aes(date, median)) +
geom_line(aes(group = city), alpha = 0.2)
p
